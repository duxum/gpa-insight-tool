{"map":"{\"version\":3,\"sources\":[\"/Users/duxum/repos/gpa-insight-tool/src/components/grade_input.js\",\"/Users/duxum/repos/gpa-insight-tool/src/components/grades_processor.js\",\"/Users/duxum/repos/gpa-insight-tool/src/components/graph.js\",\"/Users/duxum/repos/gpa-insight-tool/src/App.js\",\"/Users/duxum/repos/gpa-insight-tool/src/serviceWorker.js\",\"/Users/duxum/repos/gpa-insight-tool/src/index.js\"],\"names\":[\"GradeInputBox\",\"props\",\"options\",\"optionValues\",\"map\",\"value\",\"i\",\"react_default\",\"a\",\"createElement\",\"key\",\"className\",\"concat\",\"error\",\"onClick\",\"onEntryRemoval\",\"type\",\"onChange\",\"event\",\"onGradeSelection\",\"target\",\"onKeyUp\",\"onCreditInput\",\"name\",\"maxLength\",\"defaultLetterGradesValue\",\"Select Grade\",\"undefined\",\"A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\",\"defaultGradeScalePattern\",\"GradesProcessor\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"_entryKeyGen\",\"scalePatternInputRef\",\"React\",\"createRef\",\"state\",\"entriesData\",\"Map\",\"nextKey\",\"letterToValue\",\"gradeScalePattern\",\"scalePatternInputError\",\"input\",\"m\",\"prevM\",\"newGradeMapping\",\"newScalePattern\",\"scaleMatchingregex\",\"lengthMatched\",\"exec\",\"length\",\"push\",\"setState\",\"letterGradesValue\",\"join\",\"current\",\"data\",\"set\",\"propertyName\",\"id\",\"previousRecord\",\"get\",\"objectSpread\",\"credit\",\"isNaN\",\"console\",\"log\",\"changePropertyWithID\",\"grade\",\"size\",\"delete\",\"erroneous\",\"_iteratorNormalCompletion\",\"_didIteratorError\",\"_iteratorError\",\"_step\",\"_iterator\",\"Symbol\",\"iterator\",\"next\",\"done\",\"_ref3\",\"_ref2\",\"slicedToArray\",\"err\",\"return\",\"entries\",\"_iteratorNormalCompletion2\",\"_didIteratorError2\",\"_iteratorError2\",\"_step2\",\"_iterator2\",\"_ref6\",\"_ref5\",\"totalWeighted\",\"totalCreditTaken\",\"usedIDs\",\"usedEntries\",\"_iteratorNormalCompletion3\",\"_didIteratorError3\",\"_iteratorError3\",\"_step3\",\"_iterator3\",\"_ref9\",\"_ref8\",\"includes\",\"_this2\",\"_iteratorNormalCompletion4\",\"_didIteratorError4\",\"_iteratorError4\",\"_step4\",\"_loop\",\"grade_input\",\"keys\",\"handleGradeSelection\",\"handleCreditInput\",\"handleEntryRemoval\",\"_iterator4\",\"gpaValue\",\"updateGradeScale\",\"ref\",\"placeholder\",\"defaultGradeScale\",\"style\",\"textAlign\",\"color\",\"toFixed\",\"handleEntryAddition\",\"Component\",\"defaultMaximumGPA\",\"graph\",\"svg\",\"xScale\",\"yScale\",\"lineGenerator\",\"updateGraph\",\"height\",\"domain\",\"e\",\"semester\",\"maximumGPAValues\",\"max\",\"selectAll\",\"remove\",\"append\",\"attr\",\"axisBottom\",\"scale\",\"axisLeft\",\"datum\",\"enter\",\"d\",\"SemesterGrade\",\"onBlur\",\"onSemesterNameInput\",\"onGradeInput\",\"graphSelector\",\"margin\",\"d3Select\",\"scalePoint\",\"range\",\"padding\",\"scaleLinear\",\"line\",\"x\",\"y\",\"curve\",\"curveMonotoneX\",\"width\",\"initializeGraph\",\"Graph\",\"currentGraphEntries\",\"graphedEntries\",\"getEntriesArray\",\"_this3\",\"removeEntry\",\"handleSemesterNameUpdate\",\"handleGradeInput\",\"App\",\"grades_processor\",\"components_graph\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\n/**\\n *The box where the user input the senester grade and the number of credit for each course\\n *This is used to calculate the semester GPA \\n */\\nfunction GradeInputBox(props) {\\n  const options = props.optionValues.map((value, i) => <option key={i}>{value}</option>)\\n  return (\\n    <div className={`entry ${props.error ? \\\"error\\\" : \\\"\\\"}`}>\\n      <div className=\\\"row\\\">\\n        <button onClick={() => props.onEntryRemoval()} type=\\\"button\\\" className=\\\"delete-button\\\">x</button>\\n      </div>\\n      <div className=\\\"row\\\">\\n        <select className=\\\"grade-selection\\\" onChange={(event) => props.onGradeSelection(event.target.value)}>\\n          {options}\\n        </select>\\n      </div>\\n      <div className=\\\"row\\\">\\n        <input onKeyUp={(event) => props.onCreditInput(event.key)} type=\\\"text\\\" className=\\\"single-char\\\" name=\\\"credit\\\" maxLength=\\\"1\\\" />\\n      </div>\\n    </div>\\n\\n  )\\n}\\n\\nexport default GradeInputBox;\",\"import React from \\\"react\\\";\\nimport InputGroup from \\\"./grade_input\\\";\\n\\nlet defaultLetterGradesValue =\\n{\\n  'Select Grade': undefined, //Message placeholder, it is not incolved in GPA calculation\\n  'A+': 4,\\n  'A': 4,\\n  'A-': 3.67,\\n  'B+': 3.33,\\n  'B': 3,\\n  'B-': 2.67,\\n  'C+': 2.33,\\n  'C': 2,\\n  'C-': 1.67,\\n  'D+': 1.33,\\n  'D': 1,\\n  'D-': 0.67\\n}\\n\\nlet defaultGradeScalePattern = 'A+=>4, A=>4, A-=>3.67, B+=>3.33, B=>3, B-=>2.67, C+=>2.33, C=>2, C-=>1.67, D+=>1.33, D=>1, D-=>0.67'\\n\\n\\nclass GradesProcessor extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this._entryKeyGen = 0\\n    this.scalePatternInputRef = React.createRef() //Reference to the input field for user provided grade scale pattern\\n    this.state = {\\n      entriesData: new Map([[this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}]]), //Default entries available. Note thay the entries refers to the box of semester input\\n      letterToValue: defaultLetterGradesValue, //Maping of the grade letter to value\\n      gradeScalePattern: defaultGradeScalePattern, //Scale pattern in text. The patter mmust be a comma seprated list of Grade=>Value\\n      scalePatternInputError: false //Communicate the error in the provided grade scale pattern\\n    };\\n  }\\n\\n\\n  /**\\n   * key generator for grade input entries\\n   */\\n  nextKey() {\\n    return this._entryKeyGen++\\n  }\\n\\n\\n  /**\\n   * The pattern is encoded as comma separated sequence of letter-grade==>value\\n   * if there is an error in the pattern, calculating the GPA will be imposible and it will be \\n   * @param {string} input - The pattern the iser typed dto represent the scale\\n   */\\n  updateGradeScale(input) {\\n    let newGradeMapping = {},\\n      newScalePattern = [] //Array of characters making the new scale pattern if the input is valid\\n    let scaleMatchingregex = /([A-Z](?:\\\\+|-|\\\\s*))=>([0-9]*\\\\.?[0-9]+),*\\\\s*/g\\n    let m, prevM //The respective matched content\\n    let lengthMatched = 0\\n    do {\\n      m = scaleMatchingregex.exec(input)\\n      if (m && m.length === 3) {\\n        newGradeMapping[m[1]] = m[2]\\n        newScalePattern.push(`${m[1]}=>${m[2]}`)\\n        lengthMatched += m[0].length\\n        prevM = m\\n      } else {\\n        if ((prevM && lengthMatched === input.length)) {\\n          this.setState({ scalePatternInputError: false, letterGradesValue: newGradeMapping, gradeScalePattern: newScalePattern.join(\\\", \\\") })\\n          return\\n        }\\n      }\\n    } while (m)\\n    this.setState({ scalePatternInputError: true, letterGradesValue: {}, gradeScalePattern: \\\"undefined\\\" })\\n  }\\n\\n  /**\\n   * Change the grade scale to the default one\\n   */\\n  defaultGradeScale() {\\n    this.scalePatternInputRef.current.value = \\\"\\\"\\n    this.setState({ letterGradesValue: defaultLetterGradesValue, gradeScalePattern: defaultGradeScalePattern, scalePatternInputError: false })\\n  }\\n\\n\\n  handleEntryAddition() {\\n    const data = new Map(this.state.entriesData)\\n    data.set(this.nextKey(), {})\\n    this.setState({ entriesData: data })\\n  }\\n\\n  /**\\n   * update the state of the app by updating a given propery for entry with specific id\\n   * @param {string} propertyName - property whose name to be updated usually credit/grade\\n   * @param {int} id - id of the entry to update\\n   * @param {string|number} value - value to update property to\\n   */\\n  changePropertyWithID(propertyName, id, value) {\\n    const data = new Map(this.state.entriesData)\\n    let previousRecord = data.get(id) || {}\\n    previousRecord[propertyName] = value\\n    data.set(id, { ...previousRecord })\\n    this.setState({ entriesData: data })\\n  }\\n\\n\\n  /**\\n   * \\n   * @param {int} id - The id of the entry which received the event of credit input\\n   * @param {number} credit - The numer of the credit for the entry\\n   */\\n  handleCreditInput(id, credit) {\\n    if (isNaN(credit)) {\\n      console.log(\\\"The error has occured\\\")\\n      return\\n    }\\n    this.changePropertyWithID('credit', id, +credit)\\n  }\\n\\n  /**\\n   * \\n   * @param {number} id - The id of the entry which received the event of grade selection\\n   * @param {string} grade - The grade for the entry\\n   */\\n  handleGradeSelection(id, grade) {\\n    this.changePropertyWithID('grade', id, grade)\\n  }\\n\\n  /**\\n   * Removes an entry with particular id\\n   * Note that we cannot have zero entry on UI. If id id 0, the function will have no effect\\n   * @param {number} id - The id of entry to remove\\n   */\\n  handleEntryRemoval(id) {\\n    if (this.state.entriesData.size === 1) {\\n      return\\n    }\\n    const data = new Map(this.state.entriesData)\\n    data.delete(id)\\n    this.setState({ entriesData: data })\\n  }\\n\\n  /**\\n   * The erroneous entries are the ones which contain credit value which are not numbers \\n   * or the user has not interacted with those entries. Those entries are not considered when calculatinf the GPA\\n   * @return {number|Array} - The ids of the entries which have specific errors\\n   */\\n  erroneousEntries() {\\n    let erroneous = []\\n    for (let [id, value] of this.state.entriesData) {\\n      if (value && (isNaN(value.credit) || !value.grade || !(value.grade in this.state.letterToValue))) {\\n        erroneous.push(id)\\n      }\\n    }\\n    return erroneous\\n  }\\n\\n\\n  /**\\n   * The used entries are the ones which contain credit value which are numbers \\n   * or the user has interacted with those entries. Those entries the ones to be considered when calculating the GPA\\n   * @return {number|Array} - The ids of the entries whose format is expected\\n   */\\n  usedEntries() {\\n    let entries = []\\n    for (let [id, value] of this.state.entriesData) {\\n      if (value && !isNaN(value.credit) && value.grade && value.grade !== 'Select Grade') {\\n        entries.push(id)\\n      }\\n    }\\n    return entries\\n  }\\n\\n  /**\\n   * returns the gpa calculated from credit number and grade of non-erroneous entries\\n   * Note that an entry correspond with a specific semester.\\n   */\\n  gpaValue() {\\n    let totalWeighted = 0, totalCreditTaken = 0;\\n    let usedIDs = this.usedEntries()\\n    for (let [id, value] of this.state.entriesData) {\\n      if (usedIDs.includes(id)) {\\n        totalWeighted += value.credit * this.state.letterToValue[value.grade]\\n        totalCreditTaken += value.credit\\n      }\\n    }\\n    return (totalWeighted / totalCreditTaken)\\n  }\\n\\n  render() {\\n    let entries = []\\n    let usedIDs = this.usedEntries()\\n    for (let id of this.state.entriesData.keys()) {\\n      entries.push(<InputGroup key={id} error={(usedIDs.includes(id)) ? false : true}\\n        optionValues={Object.keys(this.state.letterToValue)}\\n        onGradeSelection={(grade) => this.handleGradeSelection(id, grade)}\\n        onCreditInput={(credit) => this.handleCreditInput(id, credit)}\\n        onEntryRemoval={() => this.handleEntryRemoval(id)} />)\\n    }\\n    let gpaValue = this.gpaValue()\\n\\n    return (\\n      <div>\\n        <div className=\\\"message\\\">\\n          <div>\\n            <input onChange={(event) => this.updateGradeScale(event.target.value)} type=\\\"text\\\" ref={this.scalePatternInputRef} placeholder=\\\"input your grade scale pattern\\\" className={`grade-scale-input ${this.state.scalePatternInputError ? 'error' : ''}`} /><button onClick={() => this.defaultGradeScale()}>default grade scale</button>\\n            <p>Note that the scale pattern is a comma separated list of letter-grade==>value i.e(A+==>3, ..., Z-==>6.4). The Default is {defaultGradeScalePattern} </p>\\n            <p>The current grade scale is {this.state.gradeScalePattern}</p>\\n          </div>\\n          <h3 style={{ textAlign: 'center' }}>The calculated GPA is <em style={{ color: 'green' }}>{gpaValue.toFixed(3)}</em>, without considering <em style={{ color: 'green' }}>{this.state.entriesData.size - usedIDs.length}</em> uninteracted with/erronous entries.</h3>\\n          <h3><b>Select the grade and input the number of credits for each class</b></h3>\\n        </div>\\n        <div className=\\\"gpa-calculator\\\">\\n          {entries}\\n          <button onClick={() => this.handleEntryAddition()} type=\\\"button\\\" className=\\\"add-button\\\">Add a semester</button>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\n\\nexport default GradesProcessor;\",\"'use-strict'\\nimport React from \\\"react\\\";\\nimport { axisBottom, axisLeft } from 'd3-axis';\\nimport { scaleLinear, scalePoint } from 'd3-scale';\\nimport { select as d3Select, } from 'd3-selection';\\nimport { line, curveMonotoneX } from 'd3-shape';\\nimport { max } from 'd3-array';\\n\\nlet defaultMaximumGPA = 4.1 //The maximum GPA will be the upper bound of the y-axis in the graph\\n\\nlet graph = {\\n    svg: undefined,\\n    xScale: undefined,\\n    yScale: undefined,\\n    lineGenerator: undefined,\\n}\\n\\nfunction initializeGraph(graphSelector) {\\n    let margin = {\\n        top: 50,\\n        right: 50,\\n        bottom: 50,\\n        left: 50\\n    },\\n        width = 750,\\n        height = 350;\\n\\n    let svg = d3Select(graphSelector).append(\\\"svg\\\")\\n        .attr(\\\"height\\\", height + margin.top + margin.bottom)\\n        .attr(\\\"width\\\", width + margin.left + margin.right)\\n        .append(\\\"g\\\")\\n        .attr(\\\"transform\\\", \\\"translate(\\\" + margin.left + \\\",\\\" + margin.top + \\\")\\\")\\n\\n    let xScale = scalePoint()\\n        .range([0, width])\\n        .padding(0.3)\\n\\n    let yScale = scaleLinear()\\n        .domain([0, defaultMaximumGPA])\\n        .range([height, 0])\\n\\n    let lineGenerator = line()\\n        .x((d) => xScale(d.semester))\\n        .y((d) => yScale(+d.grade))\\n        .curve(curveMonotoneX)\\n\\n    graph.svg = svg\\n    graph.xScale = xScale\\n    graph.yScale = yScale\\n    graph.lineGenerator = lineGenerator\\n    graph.height = height\\n    graph.width = width\\n}\\n\\ninitializeGraph('#graph')\\n\\n\\n/**\\n * update graph by removing all the dynamic stuff and graphing again according to the entries provided\\n * @param {Array.<{semester: String, grade: Number}>} entries - The array of the semesters name and GPA grade value\\n */\\nfunction updateGraph(entries) {\\n    const {\\n        svg,\\n        lineGenerator,\\n        xScale,\\n        yScale,\\n        height,\\n    } = graph\\n\\n    //Update the axis properties\\n    xScale.domain(entries.map((e) => e.semester))\\n    let maximumGPAValues = max(entries, (e) => e.grade) || 0\\n    console.log(\\\"The maximum from the function is\\\", maximumGPAValues, \\\"Using \\\", defaultMaximumGPA > maximumGPAValues ? defaultMaximumGPA : maximumGPAValues, \\\"The entries\\\", entries)\\n    yScale.domain([0, defaultMaximumGPA > maximumGPAValues ? defaultMaximumGPA : maximumGPAValues])\\n\\n    //Clean up the graph before removing elements\\n    //TODO: Animate transitions\\n    svg.selectAll(\\\".x-axis\\\").remove()\\n    svg.selectAll(\\\".y-axis\\\").remove()\\n    svg.selectAll(\\\".line\\\").remove()\\n    svg.selectAll(\\\".mark\\\").remove()\\n\\n    // x-axis component\\n    svg.append(\\\"g\\\")\\n        .attr(\\\"class\\\", \\\"x-axis\\\")\\n        .attr(\\\"transform\\\", \\\"translate(0,\\\" + height + \\\")\\\")\\n        .call(axisBottom()\\n            .scale(xScale));\\n\\n    //y-axis component\\n    svg.append(\\\"g\\\")\\n        .attr(\\\"class\\\", \\\"y-axis\\\")\\n        .call(axisLeft(yScale));\\n\\n    svg.append(\\\"path\\\")\\n        .datum(entries)\\n        .attr(\\\"class\\\", \\\"line\\\")\\n        .attr(\\\"d\\\", lineGenerator);\\n\\n    svg.selectAll(\\\".mark\\\")\\n        .data(entries)\\n        .enter().append(\\\"circle\\\")\\n        .attr(\\\"class\\\", \\\"mark\\\")\\n        .attr(\\\"cx\\\", (d) => xScale(d.semester))\\n        .attr(\\\"cy\\\", (d) => yScale(+d.grade))\\n        .attr(\\\"r\\\", 5)\\n}\\n\\nupdateGraph([]) //Draw initial empty graph\\n\\n\\nclass Graph extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this._entryKeyGen = 0\\n        this.state = {\\n            entriesData: new Map([[this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}]]),\\n            currentGraphEntries: [], //ids of the semester entries present in the graph\\n        };\\n    }\\n\\n\\n    /**\\n     * key generator for grades\\n     */\\n    nextKey() {\\n        return this._entryKeyGen++\\n    }\\n\\n    getEntriesArray() {\\n        let entries = [], graphedEntries = []\\n        for (let [id, value] of this.state.entriesData) {\\n            if (value.grade && value.semester) {\\n                graphedEntries.push(id)\\n                entries.push({ grade: value.grade, semester: value.semester })\\n            }\\n        }\\n        this.setState({ currentGraphEntries: graphedEntries })\\n        return entries\\n    }\\n    updateGraph() {\\n        // console.log(\\\"The array of entries will be\\\", this.getEntriesArray())\\n        updateGraph(this.getEntriesArray()) //passing to global function which update the graph\\n    }\\n\\n    handleEntryAddition() {\\n        const data = new Map(this.state.entriesData)\\n        data.set(this.nextKey(), {})\\n        this.setState({ entriesData: data })\\n    }\\n\\n    removeEntry(id) {\\n        if (this.state.entriesData.size === 1) {\\n            return\\n        }\\n        const data = new Map(this.state.entriesData)\\n        data.delete(id)\\n        this.setState({ entriesData: data }, () => { this.updateGraph() })\\n    }\\n    /**\\n * update the state of the app by updating a given propery for entry with specific id\\n * @param {string} propertyName - property whose name to be updated usually credit/grade\\n * @param {int} id - id of the entry to update\\n * @param {string|number} value - value to update property to\\n */\\n    changePropertyWithID(propertyName, id, value) {\\n        const data = new Map(this.state.entriesData)\\n        let previousRecord = data.get(id) || {}\\n        previousRecord[propertyName] = value\\n        data.set(id, { ...previousRecord })\\n        this.setState({ entriesData: data })\\n    }\\n\\n    handleSemesterNameUpdate(id, value) {\\n        this.changePropertyWithID('semester', id, value)\\n        if (this.state.entriesData.get(id).grade) {\\n            this.updateGraph()\\n        }\\n    }\\n\\n    handleGradeInput(id, value) {\\n        if (isNaN(value)) {\\n            return\\n        }\\n        this.changePropertyWithID('grade', id, +value)\\n        if (this.state.entriesData.get(id).semester) {\\n            this.updateGraph()\\n        }\\n    }\\n\\n\\n    render() {\\n        let entries = []\\n        for (let id of this.state.entriesData.keys()) {\\n            entries.push(<SemesterGrade error={this.state.currentGraphEntries.includes(id) ? false : true}\\n                key={id} onEntryRemoval={() => this.removeEntry(id)}\\n                onSemesterNameInput={(value) => this.handleSemesterNameUpdate(id, value)}\\n                onGradeInput={(value) => this.handleGradeInput(id, value)}\\n            />)\\n        }\\n        return (\\n            <div className=\\\"gpa-calculator\\\">\\n                {entries}\\n                <button onClick={() => this.handleEntryAddition()} type=\\\"button\\\" className=\\\"add-button\\\">Add a semester</button>\\n            </div>\\n        )\\n    }\\n}\\n\\n/**\\n * The semester and grade input entries\\n * @param {*} props \\n */\\nfunction SemesterGrade(props) {\\n    return (\\n        <div className={`entry ${props.error ? 'error' : ''}`}>\\n            <div className=\\\"row\\\">\\n                <button onClick={() => props.onEntryRemoval()} type=\\\"button\\\" className=\\\"delete-button\\\">x</button>\\n            </div>\\n            <div className=\\\"row\\\">\\n                <input onBlur={(event) => props.onSemesterNameInput(event.target.value)} type=\\\"text\\\" placeholder=\\\"Semester Name\\\" />\\n            </div>\\n            <div className=\\\"row\\\">\\n                <input onBlur={(event) => props.onGradeInput(event.target.value)} type=\\\"text\\\" placeholder=\\\"Semester Grade\\\" />\\n            </div>\\n        </div>\\n    )\\n}\\n\\nexport default Graph;\",\"import React, { Component } from 'react';\\nimport GradesInput from './components/grades_processor'\\nimport Graph from './components/graph'\\nimport './App.css';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"content\\\">\\n        <h3>GPA Facilities</h3>\\n        <hr />\\n        <GradesInput />\\n        <hr />\\n        <hr />\\n        <hr />\\n        <h1>Graphing of the GPA over different semesters</h1>\\n        <Graph />\\n      </div>\\n\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,t,a){e.exports=a(25)},21:function(e,t,a){},23:function(e,t,a){},25:function(e,t,a){\"use strict\";a.r(t);var n=a(0),r=a.n(n),l=a(13),i=a.n(l),s=(a(21),a(2)),c=a(3),o=a(5),u=a(4),d=a(6),h=a(7),m=a(8);var y=function(e){var t=e.optionValues.map(function(e,t){return r.a.createElement(\"option\",{key:t},e)});return r.a.createElement(\"div\",{className:\"entry \".concat(e.error?\"error\":\"\")},r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"button\",{onClick:function(){return e.onEntryRemoval()},type:\"button\",className:\"delete-button\"},\"x\")),r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"select\",{className:\"grade-selection\",onChange:function(t){return e.onGradeSelection(t.target.value)}},t)),r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"input\",{onKeyUp:function(t){return e.onCreditInput(t.key)},type:\"text\",className:\"single-char\",name:\"credit\",maxLength:\"1\"})))},v={\"Select Grade\":void 0,\"A+\":4,A:4,\"A-\":3.67,\"B+\":3.33,B:3,\"B-\":2.67,\"C+\":2.33,C:2,\"C-\":1.67,\"D+\":1.33,D:1,\"D-\":.67},p=\"A+=>4, A=>4, A-=>3.67, B+=>3.33, B=>3, B-=>2.67, C+=>2.33, C=>2, C-=>1.67, D+=>1.33, D=>1, D-=>0.67\",f=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(o.a)(this,Object(u.a)(t).call(this,e)))._entryKeyGen=0,a.scalePatternInputRef=r.a.createRef(),a.state={entriesData:new Map([[a.nextKey(),{}],[a.nextKey(),{}],[a.nextKey(),{}],[a.nextKey(),{}]]),letterToValue:v,gradeScalePattern:p,scalePatternInputError:!1},a}return Object(d.a)(t,e),Object(c.a)(t,[{key:\"nextKey\",value:function(){return this._entryKeyGen++}},{key:\"updateGradeScale\",value:function(e){var t,a,n={},r=[],l=/([A-Z](?:\\+|-|\\s*))=>([0-9]*\\.?[0-9]+),*\\s*/g,i=0;do{if((t=l.exec(e))&&3===t.length)n[t[1]]=t[2],r.push(\"\".concat(t[1],\"=>\").concat(t[2])),i+=t[0].length,a=t;else if(a&&i===e.length)return void this.setState({scalePatternInputError:!1,letterGradesValue:n,gradeScalePattern:r.join(\", \")})}while(t);this.setState({scalePatternInputError:!0,letterGradesValue:{},gradeScalePattern:\"undefined\"})}},{key:\"defaultGradeScale\",value:function(){this.scalePatternInputRef.current.value=\"\",this.setState({letterGradesValue:v,gradeScalePattern:p,scalePatternInputError:!1})}},{key:\"handleEntryAddition\",value:function(){var e=new Map(this.state.entriesData);e.set(this.nextKey(),{}),this.setState({entriesData:e})}},{key:\"changePropertyWithID\",value:function(e,t,a){var n=new Map(this.state.entriesData),r=n.get(t)||{};r[e]=a,n.set(t,Object(m.a)({},r)),this.setState({entriesData:n})}},{key:\"handleCreditInput\",value:function(e,t){isNaN(t)?console.log(\"The error has occured\"):this.changePropertyWithID(\"credit\",e,+t)}},{key:\"handleGradeSelection\",value:function(e,t){this.changePropertyWithID(\"grade\",e,t)}},{key:\"handleEntryRemoval\",value:function(e){if(1!==this.state.entriesData.size){var t=new Map(this.state.entriesData);t.delete(e),this.setState({entriesData:t})}}},{key:\"erroneousEntries\",value:function(){var e=[],t=!0,a=!1,n=void 0;try{for(var r,l=this.state.entriesData[Symbol.iterator]();!(t=(r=l.next()).done);t=!0){var i=r.value,s=Object(h.a)(i,2),c=s[0],o=s[1];!o||!isNaN(o.credit)&&o.grade&&o.grade in this.state.letterToValue||e.push(c)}}catch(u){a=!0,n=u}finally{try{t||null==l.return||l.return()}finally{if(a)throw n}}return e}},{key:\"usedEntries\",value:function(){var e=[],t=!0,a=!1,n=void 0;try{for(var r,l=this.state.entriesData[Symbol.iterator]();!(t=(r=l.next()).done);t=!0){var i=r.value,s=Object(h.a)(i,2),c=s[0],o=s[1];o&&!isNaN(o.credit)&&o.grade&&\"Select Grade\"!==o.grade&&e.push(c)}}catch(u){a=!0,n=u}finally{try{t||null==l.return||l.return()}finally{if(a)throw n}}return e}},{key:\"gpaValue\",value:function(){var e=0,t=0,a=this.usedEntries(),n=!0,r=!1,l=void 0;try{for(var i,s=this.state.entriesData[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var c=i.value,o=Object(h.a)(c,2),u=o[0],d=o[1];a.includes(u)&&(e+=d.credit*this.state.letterToValue[d.grade],t+=d.credit)}}catch(m){r=!0,l=m}finally{try{n||null==s.return||s.return()}finally{if(r)throw l}}return e/t}},{key:\"render\",value:function(){var e=this,t=[],a=this.usedEntries(),n=!0,l=!1,i=void 0;try{for(var s,c=function(){var n=s.value;t.push(r.a.createElement(y,{key:n,error:!a.includes(n),optionValues:Object.keys(e.state.letterToValue),onGradeSelection:function(t){return e.handleGradeSelection(n,t)},onCreditInput:function(t){return e.handleCreditInput(n,t)},onEntryRemoval:function(){return e.handleEntryRemoval(n)}}))},o=this.state.entriesData.keys()[Symbol.iterator]();!(n=(s=o.next()).done);n=!0)c()}catch(d){l=!0,i=d}finally{try{n||null==o.return||o.return()}finally{if(l)throw i}}var u=this.gpaValue();return r.a.createElement(\"div\",null,r.a.createElement(\"div\",{className:\"message\"},r.a.createElement(\"div\",null,r.a.createElement(\"input\",{onChange:function(t){return e.updateGradeScale(t.target.value)},type:\"text\",ref:this.scalePatternInputRef,placeholder:\"input your grade scale pattern\",className:\"grade-scale-input \".concat(this.state.scalePatternInputError?\"error\":\"\")}),r.a.createElement(\"button\",{onClick:function(){return e.defaultGradeScale()}},\"default grade scale\"),r.a.createElement(\"p\",null,\"Note that the scale pattern is a comma separated list of letter-grade==>value i.e(A+==>3, ..., Z-==>6.4). The Default is \",p,\" \"),r.a.createElement(\"p\",null,\"The current grade scale is \",this.state.gradeScalePattern)),r.a.createElement(\"h3\",{style:{textAlign:\"center\"}},\"The calculated GPA is \",r.a.createElement(\"em\",{style:{color:\"green\"}},u.toFixed(3)),\", without considering \",r.a.createElement(\"em\",{style:{color:\"green\"}},this.state.entriesData.size-a.length),\" uninteracted with/erronous entries.\"),r.a.createElement(\"h3\",null,r.a.createElement(\"b\",null,\"Select the grade and input the number of credits for each class\"))),r.a.createElement(\"div\",{className:\"gpa-calculator\"},t,r.a.createElement(\"button\",{onClick:function(){return e.handleEntryAddition()},type:\"button\",className:\"add-button\"},\"Add a semester\")))}}]),t}(r.a.Component),g=a(11),E=a(9),b=a(14),S=a(10),k=a(1),x=4.1,D={svg:void 0,xScale:void 0,yScale:void 0,lineGenerator:void 0};function w(e){var t=D.svg,a=D.lineGenerator,n=D.xScale,r=D.yScale,l=D.height;n.domain(e.map(function(e){return e.semester}));var i=Object(k.d)(e,function(e){return e.grade})||0;console.log(\"The maximum from the function is\",i,\"Using \",x>i?x:i,\"The entries\",e),r.domain([0,x>i?x:i]),t.selectAll(\".x-axis\").remove(),t.selectAll(\".y-axis\").remove(),t.selectAll(\".line\").remove(),t.selectAll(\".mark\").remove(),t.append(\"g\").attr(\"class\",\"x-axis\").attr(\"transform\",\"translate(0,\"+l+\")\").call(Object(g.a)().scale(n)),t.append(\"g\").attr(\"class\",\"y-axis\").call(Object(g.b)(r)),t.append(\"path\").datum(e).attr(\"class\",\"line\").attr(\"d\",a),t.selectAll(\".mark\").data(e).enter().append(\"circle\").attr(\"class\",\"mark\").attr(\"cx\",function(e){return n(e.semester)}).attr(\"cy\",function(e){return r(+e.grade)}).attr(\"r\",5)}function G(e){return r.a.createElement(\"div\",{className:\"entry \".concat(e.error?\"error\":\"\")},r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"button\",{onClick:function(){return e.onEntryRemoval()},type:\"button\",className:\"delete-button\"},\"x\")),r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"input\",{onBlur:function(t){return e.onSemesterNameInput(t.target.value)},type:\"text\",placeholder:\"Semester Name\"})),r.a.createElement(\"div\",{className:\"row\"},r.a.createElement(\"input\",{onBlur:function(t){return e.onGradeInput(t.target.value)},type:\"text\",placeholder:\"Semester Grade\"})))}!function(e){var t=50,a=50,n=50,r=50,l=Object(b.a)(e).append(\"svg\").attr(\"height\",350+t+n).attr(\"width\",750+r+a).append(\"g\").attr(\"transform\",\"translate(\"+r+\",\"+t+\")\"),i=Object(E.b)().range([0,750]).padding(.3),s=Object(E.a)().domain([0,x]).range([350,0]),c=Object(S.b)().x(function(e){return i(e.semester)}).y(function(e){return s(+e.grade)}).curve(S.a);D.svg=l,D.xScale=i,D.yScale=s,D.lineGenerator=c,D.height=350,D.width=750}(\"#graph\"),w([]);var N=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(o.a)(this,Object(u.a)(t).call(this,e)))._entryKeyGen=0,a.state={entriesData:new Map([[a.nextKey(),{}],[a.nextKey(),{}],[a.nextKey(),{}],[a.nextKey(),{}]]),currentGraphEntries:[]},a}return Object(d.a)(t,e),Object(c.a)(t,[{key:\"nextKey\",value:function(){return this._entryKeyGen++}},{key:\"getEntriesArray\",value:function(){var e=[],t=[],a=!0,n=!1,r=void 0;try{for(var l,i=this.state.entriesData[Symbol.iterator]();!(a=(l=i.next()).done);a=!0){var s=l.value,c=Object(h.a)(s,2),o=c[0],u=c[1];u.grade&&u.semester&&(t.push(o),e.push({grade:u.grade,semester:u.semester}))}}catch(d){n=!0,r=d}finally{try{a||null==i.return||i.return()}finally{if(n)throw r}}return this.setState({currentGraphEntries:t}),e}},{key:\"updateGraph\",value:function(){w(this.getEntriesArray())}},{key:\"handleEntryAddition\",value:function(){var e=new Map(this.state.entriesData);e.set(this.nextKey(),{}),this.setState({entriesData:e})}},{key:\"removeEntry\",value:function(e){var t=this;if(1!==this.state.entriesData.size){var a=new Map(this.state.entriesData);a.delete(e),this.setState({entriesData:a},function(){t.updateGraph()})}}},{key:\"changePropertyWithID\",value:function(e,t,a){var n=new Map(this.state.entriesData),r=n.get(t)||{};r[e]=a,n.set(t,Object(m.a)({},r)),this.setState({entriesData:n})}},{key:\"handleSemesterNameUpdate\",value:function(e,t){this.changePropertyWithID(\"semester\",e,t),this.state.entriesData.get(e).grade&&this.updateGraph()}},{key:\"handleGradeInput\",value:function(e,t){isNaN(t)||(this.changePropertyWithID(\"grade\",e,+t),this.state.entriesData.get(e).semester&&this.updateGraph())}},{key:\"render\",value:function(){var e=this,t=[],a=!0,n=!1,l=void 0;try{for(var i,s=function(){var a=i.value;t.push(r.a.createElement(G,{error:!e.state.currentGraphEntries.includes(a),key:a,onEntryRemoval:function(){return e.removeEntry(a)},onSemesterNameInput:function(t){return e.handleSemesterNameUpdate(a,t)},onGradeInput:function(t){return e.handleGradeInput(a,t)}}))},c=this.state.entriesData.keys()[Symbol.iterator]();!(a=(i=c.next()).done);a=!0)s()}catch(o){n=!0,l=o}finally{try{a||null==c.return||c.return()}finally{if(n)throw l}}return r.a.createElement(\"div\",{className:\"gpa-calculator\"},t,r.a.createElement(\"button\",{onClick:function(){return e.handleEntryAddition()},type:\"button\",className:\"add-button\"},\"Add a semester\"))}}]),t}(r.a.Component),j=(a(23),function(e){function t(){return Object(s.a)(this,t),Object(o.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"content\"},r.a.createElement(\"h3\",null,\"GPA Facilities\"),r.a.createElement(\"hr\",null),r.a.createElement(f,null),r.a.createElement(\"hr\",null),r.a.createElement(\"hr\",null),r.a.createElement(\"hr\",null),r.a.createElement(\"h1\",null,\"Graphing of the GPA over different semesters\"),r.a.createElement(N,null))}}]),t}(n.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(r.a.createElement(j,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[15,2,1]]]);","extractedComments":[]}