{"ast":null,"code":"import _slicedToArray from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/duxum/repos/gpa-insight-tool/src/components/grades_processor.js\";\nimport React from \"react\";\nimport InputGroup from \"./grade_input\";\nvar defaultLetterGradesValue = {\n  'Select Grade': undefined,\n  //Message placeholder, it is not incolved in GPA calculation\n  'A+': 4,\n  'A': 4,\n  'A-': 3.67,\n  'B+': 3.33,\n  'B': 3,\n  'B-': 2.67,\n  'C+': 2.33,\n  'C': 2,\n  'C-': 1.67,\n  'D+': 1.33,\n  'D': 1,\n  'D-': 0.67\n};\nvar defaultGradeScalePattern = 'A+=>4, A=>4, A-=>3.67, B+=>3.33, B=>3, B-=>2.67, C+=>2.33, C=>2, C-=>1.67, D+=>1.33, D=>1, D-=>0.67';\n\nvar GradesProcessor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GradesProcessor, _React$Component);\n\n  function GradesProcessor(props) {\n    var _this;\n\n    _classCallCheck(this, GradesProcessor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GradesProcessor).call(this, props));\n    _this._entryKeyGen = 0;\n    _this.scalePatternInputRef = React.createRef(); //Reference to the input field for user provided grade scale pattern\n\n    _this.state = {\n      entriesData: new Map([[_this.nextKey(), {}], [_this.nextKey(), {}], [_this.nextKey(), {}], [_this.nextKey(), {}]]),\n      //Default entries available. Note thay the entries refers to the box of semester input\n      letterToValue: defaultLetterGradesValue,\n      //Maping of the grade letter to value\n      gradeScalePattern: defaultGradeScalePattern,\n      //Scale pattern in text. The patter mmust be a comma seprated list of Grade=>Value\n      scalePatternInputError: false //Communicate the error in the provided grade scale pattern\n\n    };\n    return _this;\n  }\n  /**\n   * key generator for grade input entries\n   */\n\n\n  _createClass(GradesProcessor, [{\n    key: \"nextKey\",\n    value: function nextKey() {\n      return this._entryKeyGen++;\n    }\n    /**\n     * The pattern is encoded as comma separated sequence of letter-grade==>value\n     * if there is an error in the pattern, calculating the GPA will be imposible and it will be \n     * @param {string} input - The pattern the iser typed dto represent the scale\n     */\n\n  }, {\n    key: \"updateGradeScale\",\n    value: function updateGradeScale(input) {\n      var newGradeMapping = {},\n          newScalePattern = []; //Array of characters making the new scale pattern if the input is valid\n\n      var scaleMatchingregex = /([A-Z](?:\\+|-|\\s*))=>([0-9]*\\.?[0-9]+),*\\s*/g;\n      var m, prevM; //The respective matched content\n\n      var lengthMatched = 0;\n\n      do {\n        m = scaleMatchingregex.exec(input);\n\n        if (m && m.length === 3) {\n          newGradeMapping[m[1]] = m[2];\n          newScalePattern.push(\"\".concat(m[1], \"=>\").concat(m[2]));\n          lengthMatched += m[0].length;\n          prevM = m;\n        } else {\n          if (prevM && lengthMatched === input.length) {\n            this.setState({\n              scalePatternInputError: false,\n              letterGradesValue: newGradeMapping,\n              gradeScalePattern: newScalePattern.join(\", \")\n            });\n            return;\n          }\n        }\n      } while (m);\n\n      this.setState({\n        scalePatternInputError: true,\n        letterGradesValue: {},\n        gradeScalePattern: \"undefined\"\n      });\n    }\n    /**\n     * Change the grade scale to the default one\n     */\n\n  }, {\n    key: \"defaultGradeScale\",\n    value: function defaultGradeScale() {\n      this.scalePatternInputRef.current.value = \"\";\n      this.setState({\n        letterGradesValue: defaultLetterGradesValue,\n        gradeScalePattern: defaultGradeScalePattern,\n        scalePatternInputError: false\n      });\n    }\n  }, {\n    key: \"handleEntryAddition\",\n    value: function handleEntryAddition() {\n      var data = new Map(this.state.entriesData);\n      data.set(this.nextKey(), {});\n      this.setState({\n        entriesData: data\n      });\n    }\n    /**\n     * update the state of the app by updating a given propery for entry with specific id\n     * @param {string} propertyName - property whose name to be updated usually credit/grade\n     * @param {int} id - id of the entry to update\n     * @param {string|number} value - value to update property to\n     */\n\n  }, {\n    key: \"changePropertyWithID\",\n    value: function changePropertyWithID(propertyName, id, value) {\n      var data = new Map(this.state.entriesData);\n      var previousRecord = data.get(id) || {};\n      previousRecord[propertyName] = value;\n      data.set(id, _objectSpread({}, previousRecord));\n      this.setState({\n        entriesData: data\n      });\n    }\n    /**\n     * \n     * @param {int} id - The id of the entry which received the event of credit input\n     * @param {number} credit - The numer of the credit for the entry\n     */\n\n  }, {\n    key: \"handleCreditInput\",\n    value: function handleCreditInput(id, credit) {\n      if (isNaN(credit)) {\n        console.log(\"The error has occured\");\n        return;\n      }\n\n      this.changePropertyWithID('credit', id, +credit);\n    }\n    /**\n     * \n     * @param {number} id - The id of the entry which received the event of grade selection\n     * @param {string} grade - The grade for the entry\n     */\n\n  }, {\n    key: \"handleGradeSelection\",\n    value: function handleGradeSelection(id, grade) {\n      this.changePropertyWithID('grade', id, grade);\n    }\n    /**\n     * Removes an entry with particular id\n     * Note that we cannot have zero entry on UI. If id id 0, the function will have no effect\n     * @param {number} id - The id of entry to remove\n     */\n\n  }, {\n    key: \"handleEntryRemoval\",\n    value: function handleEntryRemoval(id) {\n      if (this.state.entriesData.size === 1) {\n        return;\n      }\n\n      var data = new Map(this.state.entriesData);\n      data.delete(id);\n      this.setState({\n        entriesData: data\n      });\n    }\n    /**\n     * The erroneous entries are the ones which contain credit value which are not numbers \n     * or the user has not interacted with those entries. Those entries are not considered when calculatinf the GPA\n     * @return {number|Array} - The ids of the entries which have specific errors\n     */\n\n  }, {\n    key: \"erroneousEntries\",\n    value: function erroneousEntries() {\n      var erroneous = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.entriesData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ref3 = _step.value;\n\n          var _ref2 = _slicedToArray(_ref3, 2);\n\n          var id = _ref2[0];\n          var value = _ref2[1];\n\n          if (value && (isNaN(value.credit) || !value.grade || !(value.grade in this.state.letterToValue))) {\n            erroneous.push(id);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return erroneous;\n    }\n    /**\n     * The used entries are the ones which contain credit value which are numbers \n     * or the user has interacted with those entries. Those entries the ones to be considered when calculating the GPA\n     * @return {number|Array} - The ids of the entries whose format is expected\n     */\n\n  }, {\n    key: \"usedEntries\",\n    value: function usedEntries() {\n      var entries = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.state.entriesData[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _ref6 = _step2.value;\n\n          var _ref5 = _slicedToArray(_ref6, 2);\n\n          var id = _ref5[0];\n          var value = _ref5[1];\n\n          if (value && !isNaN(value.credit) && value.grade && value.grade !== 'Select Grade') {\n            entries.push(id);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return entries;\n    }\n    /**\n     * returns the gpa calculated from credit number and grade of non-erroneous entries\n     * Note that an entry correspond with a specific semester.\n     */\n\n  }, {\n    key: \"gpaValue\",\n    value: function gpaValue() {\n      var totalWeighted = 0,\n          totalCreditTaken = 0;\n      var usedIDs = this.usedEntries();\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.state.entriesData[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _ref9 = _step3.value;\n\n          var _ref8 = _slicedToArray(_ref9, 2);\n\n          var id = _ref8[0];\n          var value = _ref8[1];\n\n          if (usedIDs.includes(id)) {\n            totalWeighted += value.credit * this.state.letterToValue[value.grade];\n            totalCreditTaken += value.credit;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return totalWeighted / totalCreditTaken;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var entries = [];\n      var usedIDs = this.usedEntries();\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var id = _step4.value;\n          entries.push(React.createElement(InputGroup, {\n            key: id,\n            error: usedIDs.includes(id) ? false : true,\n            optionValues: Object.keys(_this2.state.letterToValue),\n            onGradeSelection: function onGradeSelection(grade) {\n              return _this2.handleGradeSelection(id, grade);\n            },\n            onCreditInput: function onCreditInput(credit) {\n              return _this2.handleCreditInput(id, credit);\n            },\n            onEntryRemoval: function onEntryRemoval() {\n              return _this2.handleEntryRemoval(id);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191\n            },\n            __self: this\n          }));\n        };\n\n        for (var _iterator4 = this.state.entriesData.keys()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var gpaValue = this.gpaValue();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: function onChange(event) {\n          return _this2.updateGradeScale(event.target.value);\n        },\n        type: \"text\",\n        ref: this.scalePatternInputRef,\n        placeholder: \"input your grade scale pattern\",\n        className: \"grade-scale-input \".concat(this.state.scalePatternInputError ? 'error' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.defaultGradeScale();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"default grade scale\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Note that the scale pattern is a comma separated list of letter-grade==>value i.e(A+==>3, ..., Z-==>6.4). The Default is \", defaultGradeScalePattern, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"The current grade scale is \", this.state.gradeScalePattern)), React.createElement(\"h3\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"The calculated GPA is \", React.createElement(\"em\", {\n        style: {\n          color: 'green'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, gpaValue.toFixed(3)), \", without considering \", React.createElement(\"em\", {\n        style: {\n          color: 'green'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, this.state.entriesData.size - usedIDs.length), \" uninteracted with/erronous entries.\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Select the grade and input the number of credits for each class\"))), React.createElement(\"div\", {\n        className: \"gpa-calculator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, entries, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.handleEntryAddition();\n        },\n        type: \"button\",\n        className: \"add-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Add a semester\")));\n    }\n  }]);\n\n  return GradesProcessor;\n}(React.Component);\n\nexport default GradesProcessor;","map":{"version":3,"sources":["/Users/duxum/repos/gpa-insight-tool/src/components/grades_processor.js"],"names":["React","InputGroup","defaultLetterGradesValue","undefined","defaultGradeScalePattern","GradesProcessor","props","_entryKeyGen","scalePatternInputRef","createRef","state","entriesData","Map","nextKey","letterToValue","gradeScalePattern","scalePatternInputError","input","newGradeMapping","newScalePattern","scaleMatchingregex","m","prevM","lengthMatched","exec","length","push","setState","letterGradesValue","join","current","value","data","set","propertyName","id","previousRecord","get","credit","isNaN","console","log","changePropertyWithID","grade","size","delete","erroneous","entries","totalWeighted","totalCreditTaken","usedIDs","usedEntries","includes","Object","keys","handleGradeSelection","handleCreditInput","handleEntryRemoval","gpaValue","event","updateGradeScale","target","defaultGradeScale","textAlign","color","toFixed","handleEntryAddition","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport InputGroup from \"./grade_input\";\n\nlet defaultLetterGradesValue =\n{\n  'Select Grade': undefined, //Message placeholder, it is not incolved in GPA calculation\n  'A+': 4,\n  'A': 4,\n  'A-': 3.67,\n  'B+': 3.33,\n  'B': 3,\n  'B-': 2.67,\n  'C+': 2.33,\n  'C': 2,\n  'C-': 1.67,\n  'D+': 1.33,\n  'D': 1,\n  'D-': 0.67\n}\n\nlet defaultGradeScalePattern = 'A+=>4, A=>4, A-=>3.67, B+=>3.33, B=>3, B-=>2.67, C+=>2.33, C=>2, C-=>1.67, D+=>1.33, D=>1, D-=>0.67'\n\n\nclass GradesProcessor extends React.Component {\n  constructor(props) {\n    super(props);\n    this._entryKeyGen = 0\n    this.scalePatternInputRef = React.createRef() //Reference to the input field for user provided grade scale pattern\n    this.state = {\n      entriesData: new Map([[this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}]]), //Default entries available. Note thay the entries refers to the box of semester input\n      letterToValue: defaultLetterGradesValue, //Maping of the grade letter to value\n      gradeScalePattern: defaultGradeScalePattern, //Scale pattern in text. The patter mmust be a comma seprated list of Grade=>Value\n      scalePatternInputError: false //Communicate the error in the provided grade scale pattern\n    };\n  }\n\n\n  /**\n   * key generator for grade input entries\n   */\n  nextKey() {\n    return this._entryKeyGen++\n  }\n\n\n  /**\n   * The pattern is encoded as comma separated sequence of letter-grade==>value\n   * if there is an error in the pattern, calculating the GPA will be imposible and it will be \n   * @param {string} input - The pattern the iser typed dto represent the scale\n   */\n  updateGradeScale(input) {\n    let newGradeMapping = {},\n      newScalePattern = [] //Array of characters making the new scale pattern if the input is valid\n    let scaleMatchingregex = /([A-Z](?:\\+|-|\\s*))=>([0-9]*\\.?[0-9]+),*\\s*/g\n    let m, prevM //The respective matched content\n    let lengthMatched = 0\n    do {\n      m = scaleMatchingregex.exec(input)\n      if (m && m.length === 3) {\n        newGradeMapping[m[1]] = m[2]\n        newScalePattern.push(`${m[1]}=>${m[2]}`)\n        lengthMatched += m[0].length\n        prevM = m\n      } else {\n        if ((prevM && lengthMatched === input.length)) {\n          this.setState({ scalePatternInputError: false, letterGradesValue: newGradeMapping, gradeScalePattern: newScalePattern.join(\", \") })\n          return\n        }\n      }\n    } while (m)\n    this.setState({ scalePatternInputError: true, letterGradesValue: {}, gradeScalePattern: \"undefined\" })\n  }\n\n  /**\n   * Change the grade scale to the default one\n   */\n  defaultGradeScale() {\n    this.scalePatternInputRef.current.value = \"\"\n    this.setState({ letterGradesValue: defaultLetterGradesValue, gradeScalePattern: defaultGradeScalePattern, scalePatternInputError: false })\n  }\n\n\n  handleEntryAddition() {\n    const data = new Map(this.state.entriesData)\n    data.set(this.nextKey(), {})\n    this.setState({ entriesData: data })\n  }\n\n  /**\n   * update the state of the app by updating a given propery for entry with specific id\n   * @param {string} propertyName - property whose name to be updated usually credit/grade\n   * @param {int} id - id of the entry to update\n   * @param {string|number} value - value to update property to\n   */\n  changePropertyWithID(propertyName, id, value) {\n    const data = new Map(this.state.entriesData)\n    let previousRecord = data.get(id) || {}\n    previousRecord[propertyName] = value\n    data.set(id, { ...previousRecord })\n    this.setState({ entriesData: data })\n  }\n\n\n  /**\n   * \n   * @param {int} id - The id of the entry which received the event of credit input\n   * @param {number} credit - The numer of the credit for the entry\n   */\n  handleCreditInput(id, credit) {\n    if (isNaN(credit)) {\n      console.log(\"The error has occured\")\n      return\n    }\n    this.changePropertyWithID('credit', id, +credit)\n  }\n\n  /**\n   * \n   * @param {number} id - The id of the entry which received the event of grade selection\n   * @param {string} grade - The grade for the entry\n   */\n  handleGradeSelection(id, grade) {\n    this.changePropertyWithID('grade', id, grade)\n  }\n\n  /**\n   * Removes an entry with particular id\n   * Note that we cannot have zero entry on UI. If id id 0, the function will have no effect\n   * @param {number} id - The id of entry to remove\n   */\n  handleEntryRemoval(id) {\n    if (this.state.entriesData.size === 1) {\n      return\n    }\n    const data = new Map(this.state.entriesData)\n    data.delete(id)\n    this.setState({ entriesData: data })\n  }\n\n  /**\n   * The erroneous entries are the ones which contain credit value which are not numbers \n   * or the user has not interacted with those entries. Those entries are not considered when calculatinf the GPA\n   * @return {number|Array} - The ids of the entries which have specific errors\n   */\n  erroneousEntries() {\n    let erroneous = []\n    for (let [id, value] of this.state.entriesData) {\n      if (value && (isNaN(value.credit) || !value.grade || !(value.grade in this.state.letterToValue))) {\n        erroneous.push(id)\n      }\n    }\n    return erroneous\n  }\n\n\n  /**\n   * The used entries are the ones which contain credit value which are numbers \n   * or the user has interacted with those entries. Those entries the ones to be considered when calculating the GPA\n   * @return {number|Array} - The ids of the entries whose format is expected\n   */\n  usedEntries() {\n    let entries = []\n    for (let [id, value] of this.state.entriesData) {\n      if (value && !isNaN(value.credit) && value.grade && value.grade !== 'Select Grade') {\n        entries.push(id)\n      }\n    }\n    return entries\n  }\n\n  /**\n   * returns the gpa calculated from credit number and grade of non-erroneous entries\n   * Note that an entry correspond with a specific semester.\n   */\n  gpaValue() {\n    let totalWeighted = 0, totalCreditTaken = 0;\n    let usedIDs = this.usedEntries()\n    for (let [id, value] of this.state.entriesData) {\n      if (usedIDs.includes(id)) {\n        totalWeighted += value.credit * this.state.letterToValue[value.grade]\n        totalCreditTaken += value.credit\n      }\n    }\n    return (totalWeighted / totalCreditTaken)\n  }\n\n  render() {\n    let entries = []\n    let usedIDs = this.usedEntries()\n    for (let id of this.state.entriesData.keys()) {\n      entries.push(<InputGroup key={id} error={(usedIDs.includes(id)) ? false : true}\n        optionValues={Object.keys(this.state.letterToValue)}\n        onGradeSelection={(grade) => this.handleGradeSelection(id, grade)}\n        onCreditInput={(credit) => this.handleCreditInput(id, credit)}\n        onEntryRemoval={() => this.handleEntryRemoval(id)} />)\n    }\n    let gpaValue = this.gpaValue()\n\n    return (\n      <div>\n        <div className=\"message\">\n          <div>\n            <input onChange={(event) => this.updateGradeScale(event.target.value)} type=\"text\" ref={this.scalePatternInputRef} placeholder=\"input your grade scale pattern\" className={`grade-scale-input ${this.state.scalePatternInputError ? 'error' : ''}`} /><button onClick={() => this.defaultGradeScale()}>default grade scale</button>\n            <p>Note that the scale pattern is a comma separated list of letter-grade==>value i.e(A+==>3, ..., Z-==>6.4). The Default is {defaultGradeScalePattern} </p>\n            <p>The current grade scale is {this.state.gradeScalePattern}</p>\n          </div>\n          <h3 style={{ textAlign: 'center' }}>The calculated GPA is <em style={{ color: 'green' }}>{gpaValue.toFixed(3)}</em>, without considering <em style={{ color: 'green' }}>{this.state.entriesData.size - usedIDs.length}</em> uninteracted with/erronous entries.</h3>\n          <h3><b>Select the grade and input the number of credits for each class</b></h3>\n        </div>\n        <div className=\"gpa-calculator\">\n          {entries}\n          <button onClick={() => this.handleEntryAddition()} type=\"button\" className=\"add-button\">Add a semester</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default GradesProcessor;"]},"metadata":{},"sourceType":"module"}