{"ast":null,"code":"'use-strict';\n\nimport _objectSpread from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/duxum/repos/gpa-insight-tool/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/duxum/repos/gpa-insight-tool/src/components/graph.js\";\nimport React from \"react\";\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { scaleLinear, scalePoint } from 'd3-scale';\nimport { select as d3Select } from 'd3-selection';\nimport { line, curveMonotoneX } from 'd3-shape';\nimport { max } from 'd3-array';\nvar defaultMaximumGPA = 4.1; //The maximum GPA will be the upper bound of the y-axis in the graph\n\nvar graph = {\n  svg: undefined,\n  xScale: undefined,\n  yScale: undefined,\n  lineGenerator: undefined\n};\n\nfunction initializeGraph(graphSelector) {\n  var margin = {\n    top: 50,\n    right: 50,\n    bottom: 50,\n    left: 50\n  },\n      width = 750,\n      height = 350;\n  var svg = d3Select(graphSelector).append(\"svg\").attr(\"height\", height + margin.top + margin.bottom).attr(\"width\", width + margin.left + margin.right).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  var xScale = scalePoint().range([0, width]).padding(0.3);\n  var yScale = scaleLinear().domain([0, defaultMaximumGPA]).range([height, 0]);\n  var lineGenerator = line().x(function (d) {\n    return xScale(d.semester);\n  }).y(function (d) {\n    return yScale(+d.grade);\n  }).curve(curveMonotoneX);\n  graph.svg = svg;\n  graph.xScale = xScale;\n  graph.yScale = yScale;\n  graph.lineGenerator = lineGenerator;\n  graph.height = height;\n  graph.width = width;\n}\n\ninitializeGraph('#graph');\n/**\n * update graph by removing all the dynamic stuff and graphing again according to the entries provided\n * @param {Array.<{semester: String, grade: Number}>} entries - The array of the semesters name and GPA grade value\n */\n\nfunction _updateGraph(entries) {\n  var svg = graph.svg,\n      lineGenerator = graph.lineGenerator,\n      xScale = graph.xScale,\n      yScale = graph.yScale,\n      height = graph.height; //Update the axis properties\n\n  xScale.domain(entries.map(function (e) {\n    return e.semester;\n  }));\n  var maximumGPAValues = max(entries, function (e) {\n    return e.grade;\n  }) || 0;\n  console.log(\"The maximum from the function is\", maximumGPAValues, \"Using \", defaultMaximumGPA > maximumGPAValues ? defaultMaximumGPA : maximumGPAValues, \"The entries\", entries);\n  yScale.domain([0, defaultMaximumGPA > maximumGPAValues ? defaultMaximumGPA : maximumGPAValues]); //Clean up the graph before removing elements\n  //TODO: Animate transitions\n\n  svg.selectAll(\".x-axis\").remove();\n  svg.selectAll(\".y-axis\").remove();\n  svg.selectAll(\".line\").remove();\n  svg.selectAll(\".mark\").remove(); // x-axis component\n\n  svg.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(axisBottom().scale(xScale)); //y-axis component\n\n  svg.append(\"g\").attr(\"class\", \"y-axis\").call(axisLeft(yScale));\n  svg.append(\"path\").datum(entries).attr(\"class\", \"line\").attr(\"d\", lineGenerator);\n  svg.selectAll(\".mark\").data(entries).enter().append(\"circle\").attr(\"class\", \"mark\").attr(\"cx\", function (d) {\n    return xScale(d.semester);\n  }).attr(\"cy\", function (d) {\n    return yScale(+d.grade);\n  }).attr(\"r\", 5);\n}\n\n_updateGraph([]); //Draw initial empty graph\n\n\nvar Graph =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Graph, _React$Component);\n\n  function Graph(props) {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graph).call(this, props));\n    _this._entryKeyGen = 0;\n    _this.state = {\n      entriesData: new Map([[_this.nextKey(), {}], [_this.nextKey(), {}], [_this.nextKey(), {}], [_this.nextKey(), {}]]),\n      currentGraphEntries: [] //ids of the semester entries present in the graph\n\n    };\n    return _this;\n  }\n  /**\n   * key generator for grades\n   */\n\n\n  _createClass(Graph, [{\n    key: \"nextKey\",\n    value: function nextKey() {\n      return this._entryKeyGen++;\n    }\n  }, {\n    key: \"getEntriesArray\",\n    value: function getEntriesArray() {\n      var entries = [],\n          graphedEntries = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.entriesData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ref3 = _step.value;\n\n          var _ref2 = _slicedToArray(_ref3, 2);\n\n          var id = _ref2[0];\n          var value = _ref2[1];\n\n          if (value.grade && value.semester) {\n            graphedEntries.push(id);\n            entries.push({\n              grade: value.grade,\n              semester: value.semester\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.setState({\n        currentGraphEntries: graphedEntries\n      });\n      return entries;\n    }\n  }, {\n    key: \"updateGraph\",\n    value: function updateGraph() {\n      // console.log(\"The array of entries will be\", this.getEntriesArray())\n      _updateGraph(this.getEntriesArray()); //passing to global function which update the graph\n\n    }\n  }, {\n    key: \"handleEntryAddition\",\n    value: function handleEntryAddition() {\n      var data = new Map(this.state.entriesData);\n      data.set(this.nextKey(), {});\n      this.setState({\n        entriesData: data\n      });\n    }\n  }, {\n    key: \"removeEntry\",\n    value: function removeEntry(id) {\n      var _this2 = this;\n\n      if (this.state.entriesData.size === 1) {\n        return;\n      }\n\n      var data = new Map(this.state.entriesData);\n      data.delete(id);\n      this.setState({\n        entriesData: data\n      }, function () {\n        _this2.updateGraph();\n      });\n    }\n    /**\n    * update the state of the app by updating a given propery for entry with specific id\n    * @param {string} propertyName - property whose name to be updated usually credit/grade\n    * @param {int} id - id of the entry to update\n    * @param {string|number} value - value to update property to\n    */\n\n  }, {\n    key: \"changePropertyWithID\",\n    value: function changePropertyWithID(propertyName, id, value) {\n      var data = new Map(this.state.entriesData);\n      var previousRecord = data.get(id) || {};\n      previousRecord[propertyName] = value;\n      data.set(id, _objectSpread({}, previousRecord));\n      this.setState({\n        entriesData: data\n      });\n    }\n  }, {\n    key: \"handleSemesterNameUpdate\",\n    value: function handleSemesterNameUpdate(id, value) {\n      this.changePropertyWithID('semester', id, value);\n\n      if (this.state.entriesData.get(id).grade) {\n        this.updateGraph();\n      }\n    }\n  }, {\n    key: \"handleGradeInput\",\n    value: function handleGradeInput(id, value) {\n      if (isNaN(value)) {\n        return;\n      }\n\n      this.changePropertyWithID('grade', id, +value);\n\n      if (this.state.entriesData.get(id).semester) {\n        this.updateGraph();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var entries = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var id = _step2.value;\n          entries.push(React.createElement(SemesterGrade, {\n            error: _this3.state.currentGraphEntries.includes(id) ? false : true,\n            key: id,\n            onEntryRemoval: function onEntryRemoval() {\n              return _this3.removeEntry(id);\n            },\n            onSemesterNameInput: function onSemesterNameInput(value) {\n              return _this3.handleSemesterNameUpdate(id, value);\n            },\n            onGradeInput: function onGradeInput(value) {\n              return _this3.handleGradeInput(id, value);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196\n            },\n            __self: this\n          }));\n        };\n\n        for (var _iterator2 = this.state.entriesData.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"gpa-calculator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, entries, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this3.handleEntryAddition();\n        },\n        type: \"button\",\n        className: \"add-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Add a semester\"));\n    }\n  }]);\n\n  return Graph;\n}(React.Component);\n/**\n * The semester and grade input entries\n * @param {*} props \n */\n\n\nfunction SemesterGrade(props) {\n  return React.createElement(\"div\", {\n    className: \"entry \".concat(props.error ? 'error' : ''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.onEntryRemoval();\n    },\n    type: \"button\",\n    className: \"delete-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"x\")), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onBlur: function onBlur(event) {\n      return props.onSemesterNameInput(event.target.value);\n    },\n    type: \"text\",\n    placeholder: \"Semester Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onBlur: function onBlur(event) {\n      return props.onGradeInput(event.target.value);\n    },\n    type: \"text\",\n    placeholder: \"Semester Grade\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  })));\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/duxum/repos/gpa-insight-tool/src/components/graph.js"],"names":["React","axisBottom","axisLeft","scaleLinear","scalePoint","select","d3Select","line","curveMonotoneX","max","defaultMaximumGPA","graph","svg","undefined","xScale","yScale","lineGenerator","initializeGraph","graphSelector","margin","top","right","bottom","left","width","height","append","attr","range","padding","domain","x","d","semester","y","grade","curve","updateGraph","entries","map","e","maximumGPAValues","console","log","selectAll","remove","call","scale","datum","data","enter","Graph","props","_entryKeyGen","state","entriesData","Map","nextKey","currentGraphEntries","graphedEntries","id","value","push","setState","getEntriesArray","set","size","delete","propertyName","previousRecord","get","changePropertyWithID","isNaN","includes","removeEntry","handleSemesterNameUpdate","handleGradeInput","keys","handleEntryAddition","Component","SemesterGrade","error","onEntryRemoval","event","onSemesterNameInput","target","onGradeInput"],"mappings":"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","sourcesContent":["'use-strict'\nimport React from \"react\";\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { scaleLinear, scalePoint } from 'd3-scale';\nimport { select as d3Select, } from 'd3-selection';\nimport { line, curveMonotoneX } from 'd3-shape';\nimport { max } from 'd3-array';\n\nlet defaultMaximumGPA = 4.1 //The maximum GPA will be the upper bound of the y-axis in the graph\n\nlet graph = {\n    svg: undefined,\n    xScale: undefined,\n    yScale: undefined,\n    lineGenerator: undefined,\n}\n\nfunction initializeGraph(graphSelector) {\n    let margin = {\n        top: 50,\n        right: 50,\n        bottom: 50,\n        left: 50\n    },\n        width = 750,\n        height = 350;\n\n    let svg = d3Select(graphSelector).append(\"svg\")\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .attr(\"width\", width + margin.left + margin.right)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n    let xScale = scalePoint()\n        .range([0, width])\n        .padding(0.3)\n\n    let yScale = scaleLinear()\n        .domain([0, defaultMaximumGPA])\n        .range([height, 0])\n\n    let lineGenerator = line()\n        .x((d) => xScale(d.semester))\n        .y((d) => yScale(+d.grade))\n        .curve(curveMonotoneX)\n\n    graph.svg = svg\n    graph.xScale = xScale\n    graph.yScale = yScale\n    graph.lineGenerator = lineGenerator\n    graph.height = height\n    graph.width = width\n}\n\ninitializeGraph('#graph')\n\n\n/**\n * update graph by removing all the dynamic stuff and graphing again according to the entries provided\n * @param {Array.<{semester: String, grade: Number}>} entries - The array of the semesters name and GPA grade value\n */\nfunction updateGraph(entries) {\n    const {\n        svg,\n        lineGenerator,\n        xScale,\n        yScale,\n        height,\n    } = graph\n\n    //Update the axis properties\n    xScale.domain(entries.map((e) => e.semester))\n    let maximumGPAValues = max(entries, (e) => e.grade) || 0\n    console.log(\"The maximum from the function is\", maximumGPAValues, \"Using \", defaultMaximumGPA > maximumGPAValues ? defaultMaximumGPA : maximumGPAValues, \"The entries\", entries)\n    yScale.domain([0, defaultMaximumGPA > maximumGPAValues ? defaultMaximumGPA : maximumGPAValues])\n\n    //Clean up the graph before removing elements\n    //TODO: Animate transitions\n    svg.selectAll(\".x-axis\").remove()\n    svg.selectAll(\".y-axis\").remove()\n    svg.selectAll(\".line\").remove()\n    svg.selectAll(\".mark\").remove()\n\n    // x-axis component\n    svg.append(\"g\")\n        .attr(\"class\", \"x-axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(axisBottom()\n            .scale(xScale));\n\n    //y-axis component\n    svg.append(\"g\")\n        .attr(\"class\", \"y-axis\")\n        .call(axisLeft(yScale));\n\n    svg.append(\"path\")\n        .datum(entries)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator);\n\n    svg.selectAll(\".mark\")\n        .data(entries)\n        .enter().append(\"circle\")\n        .attr(\"class\", \"mark\")\n        .attr(\"cx\", (d) => xScale(d.semester))\n        .attr(\"cy\", (d) => yScale(+d.grade))\n        .attr(\"r\", 5)\n}\n\nupdateGraph([]) //Draw initial empty graph\n\n\nclass Graph extends React.Component {\n    constructor(props) {\n        super(props);\n        this._entryKeyGen = 0\n        this.state = {\n            entriesData: new Map([[this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}], [this.nextKey(), {}]]),\n            currentGraphEntries: [], //ids of the semester entries present in the graph\n        };\n    }\n\n\n    /**\n     * key generator for grades\n     */\n    nextKey() {\n        return this._entryKeyGen++\n    }\n\n    getEntriesArray() {\n        let entries = [], graphedEntries = []\n        for (let [id, value] of this.state.entriesData) {\n            if (value.grade && value.semester) {\n                graphedEntries.push(id)\n                entries.push({ grade: value.grade, semester: value.semester })\n            }\n        }\n        this.setState({ currentGraphEntries: graphedEntries })\n        return entries\n    }\n    updateGraph() {\n        // console.log(\"The array of entries will be\", this.getEntriesArray())\n        updateGraph(this.getEntriesArray()) //passing to global function which update the graph\n    }\n\n    handleEntryAddition() {\n        const data = new Map(this.state.entriesData)\n        data.set(this.nextKey(), {})\n        this.setState({ entriesData: data })\n    }\n\n    removeEntry(id) {\n        if (this.state.entriesData.size === 1) {\n            return\n        }\n        const data = new Map(this.state.entriesData)\n        data.delete(id)\n        this.setState({ entriesData: data }, () => { this.updateGraph() })\n    }\n    /**\n * update the state of the app by updating a given propery for entry with specific id\n * @param {string} propertyName - property whose name to be updated usually credit/grade\n * @param {int} id - id of the entry to update\n * @param {string|number} value - value to update property to\n */\n    changePropertyWithID(propertyName, id, value) {\n        const data = new Map(this.state.entriesData)\n        let previousRecord = data.get(id) || {}\n        previousRecord[propertyName] = value\n        data.set(id, { ...previousRecord })\n        this.setState({ entriesData: data })\n    }\n\n    handleSemesterNameUpdate(id, value) {\n        this.changePropertyWithID('semester', id, value)\n        if (this.state.entriesData.get(id).grade) {\n            this.updateGraph()\n        }\n    }\n\n    handleGradeInput(id, value) {\n        if (isNaN(value)) {\n            return\n        }\n        this.changePropertyWithID('grade', id, +value)\n        if (this.state.entriesData.get(id).semester) {\n            this.updateGraph()\n        }\n    }\n\n\n    render() {\n        let entries = []\n        for (let id of this.state.entriesData.keys()) {\n            entries.push(<SemesterGrade error={this.state.currentGraphEntries.includes(id) ? false : true}\n                key={id} onEntryRemoval={() => this.removeEntry(id)}\n                onSemesterNameInput={(value) => this.handleSemesterNameUpdate(id, value)}\n                onGradeInput={(value) => this.handleGradeInput(id, value)}\n            />)\n        }\n        return (\n            <div className=\"gpa-calculator\">\n                {entries}\n                <button onClick={() => this.handleEntryAddition()} type=\"button\" className=\"add-button\">Add a semester</button>\n            </div>\n        )\n    }\n}\n\n/**\n * The semester and grade input entries\n * @param {*} props \n */\nfunction SemesterGrade(props) {\n    return (\n        <div className={`entry ${props.error ? 'error' : ''}`}>\n            <div className=\"row\">\n                <button onClick={() => props.onEntryRemoval()} type=\"button\" className=\"delete-button\">x</button>\n            </div>\n            <div className=\"row\">\n                <input onBlur={(event) => props.onSemesterNameInput(event.target.value)} type=\"text\" placeholder=\"Semester Name\" />\n            </div>\n            <div className=\"row\">\n                <input onBlur={(event) => props.onGradeInput(event.target.value)} type=\"text\" placeholder=\"Semester Grade\" />\n            </div>\n        </div>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}